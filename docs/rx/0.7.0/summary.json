{"index":[{"sig":"BehaviorSubject<T> extends Subject<T>","name":"BehaviorSubject","kind":8,"flags":1,"docs":{"content":[{"value":"A variant of Subject that requires an initial value and emits its current value whenever it is subscribed to."},{"tag":"see","value":"be"}]},"href":"index--BehaviorSubject.html","children":[{"sig":"constructor(currentValue: T): BehaviorSubject<T>","name":"constructor","kind":14,"flags":0,"href":"index--BehaviorSubject.html#s238"},{"sig":"currentValue: T","name":"currentValue","kind":10,"flags":8,"href":"index--BehaviorSubject.html#s239"},{"sig":"next(val: T): void","name":"next","kind":11,"flags":4,"href":"index--BehaviorSubject.html#s243"},{"sig":"onSubscribe(subscription: Subscriber<T>): UnsubscribeFunction","name":"onSubscribe","kind":11,"flags":16,"href":"index--BehaviorSubject.html#s241"},{"sig":"value(): T","name":"value","kind":12,"flags":4,"href":"index--BehaviorSubject.html#s240"}]},{"sig":"EmptyEvent","name":"EmptyEvent","kind":4,"flags":1,"href":"index--EmptyEvent.html","children":[{"sig":"type: 'empty'","name":"type","kind":10,"flags":4,"href":"index--EmptyEvent.html#s450"}]},{"sig":"InsertEvent<T, K>","name":"InsertEvent","kind":4,"flags":1,"href":"index--InsertEvent.html","children":[{"sig":"item: T","name":"item","kind":10,"flags":4,"href":"index--InsertEvent.html#s443"},{"sig":"key: K","name":"key","kind":10,"flags":4,"href":"index--InsertEvent.html#s444"},{"sig":"type: 'insert'","name":"type","kind":10,"flags":4,"href":"index--InsertEvent.html#s442"}]},{"sig":"InteropObservable<T>","name":"InteropObservable","kind":4,"flags":1,"href":"index--InteropObservable.html","children":[{"sig":"[observableSymbol]: () => Subscribable<T>","name":"[observableSymbol]","kind":10,"flags":4,"href":"index--InteropObservable.html#s46"}]},{"sig":"Observable<T>","name":"Observable","kind":8,"flags":1,"docs":{"content":[{"value":"A representation of any set of values over any amount of time."}]},"href":"index--Observable.html","children":[{"sig":"[observableSymbol](): Observable","name":"[observableSymbol]","kind":11,"flags":4,"href":"index--Observable.html#s110"},{"sig":"___subscribe: SubscribeFunction<T>","name":"___subscribe","kind":10,"flags":16,"href":"index--Observable.html#s112"},{"sig":"catchError<T2 in T | never>(selector: (err: any, source: Observable<T>) => Observable<T2> | void): Observable<T>","name":"catchError","kind":11,"flags":4,"href":"index--Observable.html#s164"},{"sig":"constructor(___subscribe: SubscribeFunction<T>): Observable<T>","name":"constructor","kind":14,"flags":0,"href":"index--Observable.html#s111"},{"sig":"debounceTime(time?: number, timer?: (delay: number) => Observable<void>): Observable<T>","name":"debounceTime","kind":11,"flags":4,"href":"index--Observable.html#s170"},{"sig":"distinctUntilChanged(): Observable<T>","name":"distinctUntilChanged","kind":11,"flags":4,"href":"index--Observable.html#s175"},{"sig":"filter<T2>(fn: (val: T) => boolean): Observable<T2>","name":"filter","kind":11,"flags":4,"href":"index--Observable.html#s176"},{"sig":"finalize(fn: () => void): Observable<T>","name":"finalize","kind":11,"flags":4,"href":"index--Observable.html#s181"},{"sig":"first(): Observable<T>","name":"first","kind":11,"flags":4,"href":"index--Observable.html#s184"},{"sig":"map<T2>(mapFn: (val: T) => T2): Observable<T2>","name":"map","kind":11,"flags":4,"href":"index--Observable.html#s185"},{"sig":"mergeMap<T2>(project: (val: T) => Observable<T2>): Observable<T2>","name":"mergeMap","kind":11,"flags":4,"href":"index--Observable.html#s190"},{"sig":"pipe<A>(a: Operator<T, A>): Observable<A>","name":"pipe","kind":11,"flags":16388,"href":"index--Observable.html#s122"},{"sig":"pipe<A, B>(a: Operator<T, A>, b: Operator<A, B>): Observable<B>","name":"pipe","kind":11,"flags":16388,"href":"index--Observable.html#s125"},{"sig":"pipe<A, B, C>(a: Operator<T, A>, b: Operator<A, B>, c: Operator<B, C>): Observable<C>","name":"pipe","kind":11,"flags":16388,"href":"index--Observable.html#s130"},{"sig":"pipe<A, B, C, D>(a: Operator<T, A>, b: Operator<A, B>, c: Operator<B, C>, d: Operator<C, D>): Observable<D>","name":"pipe","kind":11,"flags":16388,"href":"index--Observable.html#s137"},{"sig":"pipe<A, B, C, D, E>(a: Operator<T, A>, b: Operator<A, B>, c: Operator<B, C>, d: Operator<C, D>, e: Operator<D, E>): Observable<E>","name":"pipe","kind":11,"flags":16388,"href":"index--Observable.html#s146"},{"sig":"pipe(...extra: Operator<any, any>[]): Observable<any>","name":"pipe","kind":11,"flags":4,"docs":{"content":[{"value":"Used to stitch together functional operators into a chain."}]},"href":"index--Observable.html#s157"},{"sig":"publishLast(): Observable<T>","name":"publishLast","kind":11,"flags":4,"href":"index--Observable.html#s195"},{"sig":"reduce<T2>(reduceFn: (acc: T2, val: T, i: number) => T2, seed: T2): Observable<T2>","name":"reduce","kind":11,"flags":4,"href":"index--Observable.html#s196"},{"sig":"select<K in keyof T>(key: K): Observable<T[K]>","name":"select","kind":11,"flags":4,"href":"index--Observable.html#s204"},{"sig":"share(): Observable<T>","name":"share","kind":11,"flags":4,"href":"index--Observable.html#s207"},{"sig":"subscribe(next?: NextObserver<T>, fwd?: (subs: Subscription) => void): Subscription","name":"subscribe","kind":11,"flags":4,"docs":{"content":[{"value":"Invokes an execution of an Observable and registers Observer handlers for notifications it will emit."}]},"href":"index--Observable.html#s159"},{"sig":"switchMap<T2>(project: (val: T) => Observable<T2>): Observable<T2>","name":"switchMap","kind":11,"flags":4,"href":"index--Observable.html#s208"},{"sig":"take(howMany: number): Observable<T>","name":"take","kind":11,"flags":4,"href":"index--Observable.html#s213"},{"sig":"takeWhile(fn: (val: T) => boolean): Observable<T>","name":"takeWhile","kind":11,"flags":4,"href":"index--Observable.html#s215"},{"sig":"tap(tapFn: (val: T) => void): Observable<T>","name":"tap","kind":11,"flags":4,"href":"index--Observable.html#s219"},{"sig":"then<E, R>(resolve: (val: T) => R, reject?: (e: E) => R): Promise<R>","name":"then","kind":11,"flags":4,"href":"index--Observable.html#s113"}]},{"sig":"Observable<T>","name":"Observable","kind":4,"flags":131073,"href":"index--Observable.html","children":[{"sig":"catchError<T2 in T | never>(selector: (err: any, source: Observable<T>) => Observable<T2> | void): Observable<T>","name":"catchError","kind":11,"flags":4,"href":"index--Observable.html#s164"},{"sig":"debounceTime(time?: number, timer?: (delay: number) => Observable<void>): Observable<T>","name":"debounceTime","kind":11,"flags":4,"href":"index--Observable.html#s170"},{"sig":"distinctUntilChanged(): Observable<T>","name":"distinctUntilChanged","kind":11,"flags":4,"href":"index--Observable.html#s175"},{"sig":"filter<T2>(fn: (val: T) => boolean): Observable<T2>","name":"filter","kind":11,"flags":4,"href":"index--Observable.html#s176"},{"sig":"finalize(fn: () => void): Observable<T>","name":"finalize","kind":11,"flags":4,"href":"index--Observable.html#s181"},{"sig":"first(): Observable<T>","name":"first","kind":11,"flags":4,"href":"index--Observable.html#s184"},{"sig":"map<T2>(mapFn: (val: T) => T2): Observable<T2>","name":"map","kind":11,"flags":4,"href":"index--Observable.html#s185"},{"sig":"mergeMap<T2>(project: (val: T) => Observable<T2>): Observable<T2>","name":"mergeMap","kind":11,"flags":4,"href":"index--Observable.html#s190"},{"sig":"publishLast(): Observable<T>","name":"publishLast","kind":11,"flags":4,"href":"index--Observable.html#s195"},{"sig":"reduce<T2>(reduceFn: (acc: T2, val: T, i: number) => T2, seed: T2): Observable<T2>","name":"reduce","kind":11,"flags":4,"href":"index--Observable.html#s196"},{"sig":"select<K in keyof T>(key: K): Observable<T[K]>","name":"select","kind":11,"flags":4,"href":"index--Observable.html#s204"},{"sig":"share(): Observable<T>","name":"share","kind":11,"flags":4,"href":"index--Observable.html#s207"},{"sig":"switchMap<T2>(project: (val: T) => Observable<T2>): Observable<T2>","name":"switchMap","kind":11,"flags":4,"href":"index--Observable.html#s208"},{"sig":"take(howMany: number): Observable<T>","name":"take","kind":11,"flags":4,"href":"index--Observable.html#s213"},{"sig":"takeWhile(fn: (val: T) => boolean): Observable<T>","name":"takeWhile","kind":11,"flags":4,"href":"index--Observable.html#s215"},{"sig":"tap(tapFn: (val: T) => void): Observable<T>","name":"tap","kind":11,"flags":4,"href":"index--Observable.html#s219"}]},{"sig":"Observer<T>","name":"Observer","kind":4,"flags":1,"href":"index--Observer.html","children":[{"sig":"complete: CompleteFunction","name":"complete","kind":10,"flags":4,"href":"index--Observer.html#s37"},{"sig":"error: ErrorFunction","name":"error","kind":10,"flags":4,"href":"index--Observer.html#s36"},{"sig":"next: NextFunction<T>","name":"next","kind":10,"flags":4,"href":"index--Observer.html#s35"}]},{"sig":"Reference<T> extends Subject<T>","name":"Reference","kind":8,"flags":1,"docs":{"content":[{"value":"A Reference is a behavior subject that does not require an initial value."}]},"href":"index--Reference.html","children":[{"sig":"$value: T | typeof Undefined = Undefined","name":"$value","kind":10,"flags":16,"href":"index--Reference.html#s263"},{"sig":"hasValue(): boolean","name":"hasValue","kind":12,"flags":4,"href":"index--Reference.html#s264"},{"sig":"next(val: T): void","name":"next","kind":11,"flags":4,"href":"index--Reference.html#s268"},{"sig":"onSubscribe(subscription: Subscriber<T>): UnsubscribeFunction","name":"onSubscribe","kind":11,"flags":16,"href":"index--Reference.html#s266"},{"sig":"value(): T","name":"value","kind":12,"flags":4,"href":"index--Reference.html#s265"}]},{"sig":"RemoveEvent<K>","name":"RemoveEvent","kind":4,"flags":1,"href":"index--RemoveEvent.html","children":[{"sig":"key: K","name":"key","kind":10,"flags":4,"href":"index--RemoveEvent.html#s448"},{"sig":"type: 'remove'","name":"type","kind":10,"flags":4,"href":"index--RemoveEvent.html#s447"}]},{"sig":"ReplaySubject<T, ErrorT> extends Subject<T, ErrorT>","name":"ReplaySubject","kind":8,"flags":1,"docs":{"content":[{"value":"A variant of Subject that \"replays\" or emits old values to new subscribers.\nIt buffers a set number of values and will emit those values immediately to any\nnew subscribers in addition to emitting new values to existing subscribers."}]},"href":"index--ReplaySubject.html","children":[{"sig":"buffer: T[] = []","name":"buffer","kind":10,"flags":8,"href":"index--ReplaySubject.html#s248"},{"sig":"bufferSize: number = Infinity","name":"bufferSize","kind":10,"flags":68,"href":"index--ReplaySubject.html#s252"},{"sig":"constructor(bufferSize: number): ReplaySubject<T, ErrorT>","name":"constructor","kind":14,"flags":0,"href":"index--ReplaySubject.html#s251"},{"sig":"error(val: ErrorT): void","name":"error","kind":11,"flags":4,"href":"index--ReplaySubject.html#s256"},{"sig":"hasError: boolean = false","name":"hasError","kind":10,"flags":8,"href":"index--ReplaySubject.html#s249"},{"sig":"lastError: ErrorT","name":"lastError","kind":10,"flags":8,"href":"index--ReplaySubject.html#s250"},{"sig":"next(val: T): void","name":"next","kind":11,"flags":4,"href":"index--ReplaySubject.html#s258"},{"sig":"onSubscribe(subscriber: Subscriber<T>): () => boolean","name":"onSubscribe","kind":11,"flags":16,"href":"index--ReplaySubject.html#s253"}]},{"sig":"Subject<T, ErrorT> extends Observable<T>","name":"Subject","kind":8,"flags":1,"docs":{"content":[{"value":"A Subject is an Observable that allows values to be\nmulticasted to many Observers."}]},"href":"index--Subject.html","children":[{"sig":"complete(): void","name":"complete","kind":11,"flags":4,"href":"index--Subject.html#s235"},{"sig":"constructor(): Subject<T, ErrorT>","name":"constructor","kind":14,"flags":0,"href":"index--Subject.html#s230"},{"sig":"error(e: ErrorT): void","name":"error","kind":11,"flags":4,"href":"index--Subject.html#s233"},{"sig":"isStopped: boolean = false","name":"isStopped","kind":10,"flags":16,"href":"index--Subject.html#s229"},{"sig":"next(a: T): void","name":"next","kind":11,"flags":4,"href":"index--Subject.html#s231"},{"sig":"observers: Set<Subscriber<T>> = new Set<Subscriber<T>>()","name":"observers","kind":10,"flags":16,"href":"index--Subject.html#s226"},{"sig":"onSubscribe(subscriber: Subscriber<T>): UnsubscribeFunction","name":"onSubscribe","kind":11,"flags":16,"href":"index--Subject.html#s227"}]},{"sig":"Subscribable<T>","name":"Subscribable","kind":4,"flags":1,"href":"index--Subscribable.html","children":[{"sig":"subscribe(observer: Observer<T>): Subscription","name":"subscribe","kind":11,"flags":0,"href":"index--Subscribable.html#s40"}]},{"sig":"Subscriber<T>","name":"Subscriber","kind":8,"flags":1,"href":"index--Subscriber.html","children":[{"sig":"closed: boolean = false","name":"closed","kind":10,"flags":4,"href":"index--Subscriber.html#s55"},{"sig":"complete(): void","name":"complete","kind":11,"flags":4,"href":"index--Subscriber.html#s69"},{"sig":"constructor(observer: Observer<T>, subscribe?: SubscribeFunction<T>, fwd?: (subscriber: Subscription) => void): Subscriber<T>","name":"constructor","kind":14,"flags":0,"href":"index--Subscriber.html#s56"},{"sig":"error(e: ObservableError): void","name":"error","kind":11,"flags":4,"href":"index--Subscriber.html#s67"},{"sig":"next(val: T): void","name":"next","kind":11,"flags":4,"href":"index--Subscriber.html#s65"},{"sig":"observer: Observer<T>","name":"observer","kind":10,"flags":8,"href":"index--Subscriber.html#s57"},{"sig":"onUnsubscribe: UnsubscribeFunction | void","name":"onUnsubscribe","kind":10,"flags":8,"href":"index--Subscriber.html#s52"},{"sig":"setTeardown(teardown: () => void): void","name":"setTeardown","kind":11,"flags":4,"href":"index--Subscriber.html#s62"},{"sig":"teardown: () => void","name":"teardown","kind":10,"flags":8,"href":"index--Subscriber.html#s53"},{"sig":"unsubscribe(): void","name":"unsubscribe","kind":11,"flags":4,"href":"index--Subscriber.html#s70"}]},{"sig":"Subscription","name":"Subscription","kind":4,"flags":1,"href":"index--Subscription.html","children":[{"sig":"unsubscribe(): void","name":"unsubscribe","kind":11,"flags":0,"href":"index--Subscription.html#s50"}]}]}