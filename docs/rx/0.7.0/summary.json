[{"name":"Subscriber","kind":8,"flags":1,"href":"index--Subscriber.html"},{"name":"Observable","kind":8,"flags":1,"docs":{"content":[{"value":"A representation of any set of values over any amount of time."}]},"href":"index--Observable.html"},{"name":"Operator","kind":2,"flags":1,"href":"index--html#s28"},{"name":"Observer","kind":4,"flags":1,"href":"index--Observer.html"},{"name":"Subscribable","kind":4,"flags":1,"href":"index--Subscribable.html"},{"name":"Subscription","kind":4,"flags":1,"href":"index--Subscription.html"},{"name":"observableSymbol","kind":31,"flags":1,"href":"index--html#s43"},{"name":"InteropObservable","kind":4,"flags":1,"href":"index--InteropObservable.html"},{"name":"pipe","kind":16,"flags":16385,"docs":{"content":[{"value":"Used to stitch together functional operators into a chain."}]},"href":"index--html#s71"},{"name":"pipe","kind":16,"flags":16385,"href":"index--html#s77"},{"name":"pipe","kind":16,"flags":16385,"href":"index--html#s85"},{"name":"pipe","kind":16,"flags":16385,"href":"index--html#s95"},{"name":"pipe","kind":16,"flags":1,"href":"index--html#s107"},{"name":"Subject","kind":8,"flags":1,"docs":{"content":[{"value":"A Subject is an Observable that allows values to be\nmulticasted to many Observers."}]},"href":"index--Subject.html"},{"name":"BehaviorSubject","kind":8,"flags":1,"docs":{"content":[{"value":"A variant of Subject that requires an initial value and emits its current value whenever it is subscribed to."},{"tag":"see","value":"be"}]},"href":"index--BehaviorSubject.html"},{"name":"ReplaySubject","kind":8,"flags":1,"docs":{"content":[{"value":"A variant of Subject that \"replays\" or emits old values to new subscribers.\nIt buffers a set number of values and will emit those values immediately to any\nnew subscribers in addition to emitting new values to existing subscribers."}]},"href":"index--ReplaySubject.html"},{"name":"Reference","kind":8,"flags":1,"docs":{"content":[{"value":"A Reference is a behavior subject that does not require an initial value."}]},"href":"index--Reference.html"},{"name":"concat","kind":16,"flags":1,"docs":{"content":[{"value":"Creates an output Observable which sequentially emits all values from given Observable and then moves on to the next."}]},"href":"index--html#s266"},{"name":"defer","kind":16,"flags":1,"docs":{"content":[{"value":"Creates an Observable that, on subscribe, calls an Observable factory to make an Observable for each new Observer."}]},"href":"index--html#s271"},{"name":"isInterop","kind":16,"flags":1,"href":"index--html#s275"},{"name":"fromArray","kind":16,"flags":1,"href":"index--html#s278"},{"name":"fromPromise","kind":16,"flags":1,"href":"index--html#s281"},{"name":"from","kind":16,"flags":1,"docs":{"content":[{"value":"Creates an Observable from an Array, an array-like object, a Promise, an iterable object, or an Observable-like object."}]},"href":"index--html#s284"},{"name":"of","kind":16,"flags":1,"docs":{"content":[{"value":"Converts the arguments to an observable sequence."}]},"href":"index--html#s287"},{"name":"toPromise","kind":16,"flags":1,"docs":{"content":[{"value":"Generates a promise from an observable, the promise will resolve when the observable completes."}]},"href":"index--html#s290"},{"name":"operatorNext","kind":16,"flags":1,"href":"index--html#s293"},{"name":"operator","kind":16,"flags":1,"href":"index--html#s303"},{"name":"map","kind":16,"flags":1,"docs":{"content":[{"value":"Applies a given project function to each value emitted by the source Observable, and emits the resulting values as an Observable."}]},"href":"index--html#s312"},{"name":"reduce","kind":16,"flags":1,"docs":{"content":[{"value":"Applies an accumulator function over the source Observable, and returns the accumulated result when the source completes, given an optional seed value."}]},"href":"index--html#s318"},{"name":"debounceFunction","kind":16,"flags":1,"href":"index--html#s327"},{"name":"interval","kind":16,"flags":1,"href":"index--html#s336"},{"name":"timer","kind":16,"flags":1,"href":"index--html#s338"},{"name":"debounceTime","kind":16,"flags":1,"docs":{"content":[{"value":"Emits a value from the source Observable only after a particular time span has passed without another source emission."}]},"href":"index--html#s340"},{"name":"switchMap","kind":16,"flags":1,"docs":{"content":[{"value":"Projects each source value to an Observable which is merged in the output Observable,\nemitting values only from the most recently projected Observable."}]},"href":"index--html#s344"},{"name":"mergeMap","kind":16,"flags":1,"docs":{"content":[{"value":"Projects each source value to an Observable which is merged in the output Observable."}]},"href":"index--html#s352"},{"name":"exhaustMap","kind":16,"flags":1,"docs":{"content":[{"value":"Projects each source value to an Observable which is merged in the output Observable\nonly if the previous projected Observable has completed."}]},"href":"index--html#s360"},{"name":"filter","kind":16,"flags":1,"docs":{"content":[{"value":"Filter items emitted by the source Observable."},{"tag":"see","value":"distinctUntilChanged"}]},"href":"index--html#s366"},{"name":"take","kind":16,"flags":1,"docs":{"content":[{"value":"Emits only the first count values emitted by the source Observable."}]},"href":"index--html#s371"},{"name":"takeWhile","kind":16,"flags":1,"docs":{"content":[{"value":"Emits values while fn result is truthy."}]},"href":"index--html#s374"},{"name":"first","kind":16,"flags":1,"docs":{"content":[{"value":"Emits only the first value emitted by the source Observable."}]},"href":"index--html#s379"},{"name":"tap","kind":16,"flags":1,"docs":{"content":[{"value":"Perform a side effect for every emission on the source Observable,\nbut return an Observable that is identical to the source."}]},"href":"index--html#s381"},{"name":"catchError","kind":16,"flags":1,"docs":{"content":[{"value":"Catches errors on the observable."}]},"href":"index--html#s386"},{"name":"distinctUntilChanged","kind":16,"flags":1,"docs":{"content":[{"value":"Returns an Observable that emits all items emitted by the source Observable\nthat are distinct by comparison from the previous item."}]},"href":"index--html#s394"},{"name":"share","kind":16,"flags":1,"href":"index--html#s396"},{"name":"publishLast","kind":16,"flags":1,"docs":{"content":[{"value":"Returns an observable that shares a single subscription to the underlying sequence containing only the last notification."}]},"href":"index--html#s398"},{"name":"merge","kind":16,"flags":1,"docs":{"content":[{"value":"Creates an output Observable which concurrently emits all values from every given input Observable."}]},"href":"index--html#s400"},{"name":"zip","kind":16,"flags":1,"docs":{"content":[{"value":"Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each of its input Observables."}]},"href":"index--html#s405"},{"name":"combineLatest","kind":16,"flags":1,"docs":{"content":[{"value":"Combines multiple Observables to create an Observable whose values are calculated from the\nlatest values of each of its input Observables."}]},"href":"index--html#s408"},{"name":"finalize","kind":16,"flags":1,"docs":{"content":[{"value":"Returns an Observable that mirrors the source Observable, but will call a\nspecified function when the source terminates on complete or error."}]},"href":"index--html#s411"},{"name":"throwError","kind":16,"flags":1,"docs":{"content":[{"value":"Creates an Observable that emits no items to the Observer and immediately emits an error notification."}]},"href":"index--html#s415"},{"name":"EMPTY","kind":31,"flags":1,"href":"index--html#s417"},{"name":"be","kind":16,"flags":1,"docs":{"content":[{"value":"Creates a new Behavior Subject."}]},"href":"index--html#s418"},{"name":"observable","kind":16,"flags":1,"docs":{"content":[{"value":"Creates a new Observable"}]},"href":"index--html#s421"},{"name":"subject","kind":16,"flags":1,"docs":{"content":[{"value":"Creates a new Subject"}]},"href":"index--html#s424"},{"name":"ref","kind":16,"flags":1,"docs":{"content":[{"value":"Creates a new Reference object. A reference is a Behavior Subject that does not require an initial value."}]},"href":"index--html#s426"},{"name":"operators","kind":31,"flags":1,"href":"index--html#s428"},{"name":"Observable","kind":4,"flags":131073,"href":"index--Observable.html"},{"name":"InsertEvent","kind":4,"flags":1,"href":"index--InsertEvent.html"},{"name":"RemoveEvent","kind":4,"flags":1,"href":"index--RemoveEvent.html"},{"name":"EmptyEvent","kind":4,"flags":1,"href":"index--EmptyEvent.html"},{"name":"ListEvent","kind":2,"flags":1,"href":"index--html#s443"}]